#!/usr/bin/env perl
use strict;
use warnings;

#-------------------------------------------------------------------
# libraries

use Data::Dumper;
use Getopt::Long;
use FindBin;
use lib "$FindBin::RealBin/../perl5";
use MDU;
use MDU::Logger qw(msg err);
use File::Path qw(make_path remove_tree);
use Digest::MD5 qw(md5 md5_hex md5_base64);;

#-------------------------------------------------------------------
# command line

my $SCRIPT = 'download_reads.sh';

#-------------------------------------------------------------------
# command line

my $verbose = 0;
my $user = $ENV{USER};
my $www = 'https://bioinformatics.mdu.unimelb.edu.au';
my $name = 'AUTO';
my $dir = $ENV{HOME}.'/public_html';
my $secure = 0;
my $fastq = '/home/seq/MDU/READS';
my $copy = '';

sub usage {
  my $EXE = $FindBin::RealScript;
  print <<"_HELP_";
SYNOPSIS
  Prepare a web folder to share MDU FASTQ data
USAGE
  $EXE [options] <isolates.tab>
OPTIONS
  --help	This help
  --verbose	Extra debugging output ($verbose)
  --user USER   User account to publish as ($user)
  --dir USER    Private local folder ($dir)
  --name NAME   Folder name ($name)
  --www URL     Public facing website URL ($www)
  --fastq DIR   Where to look for FASTQ files ($fastq)
  --copy        Copy files, don't symlink
INPUT FORMAT
  The <isolates.tab> should be TSV format:
    <MDU_ID> <TAB> <AUSMDU_ID> <NEWLINE>
  Or if you want to use the native ID:
    <MDU_ID> <NEWLINE>
    <MDU_ID> <TAB> <NEWLINE>

_HELP_
  exit;
}
#  --secure      Add user/password via .htaccess ($secure)

GetOptions(
  "help"      => \&usage,
  "verbose"   => \$verbose,
  "user=s"    => \$user,
  "name=s"    => \$name,
  "www=s"     => \$www,
  "dir=s"     => \$dir,
  "fastq=s"   => \$fastq,
  "copy!"     => \$copy,
#  "secure!"   => \$secure,
) 
or usage();

#-------------------------------------------------------------------
# main script

@ARGV or usage();

# load isolates.tab
msg("Loading: @ARGV");
my %map;
while (<ARGV>) {
  chomp;
  my($mdu,$new) = split m/\t/;
  next unless $mdu and $mdu =~ m/^\d+|DMG/;
  $new ||= $mdu;  # if no alternate ID, publish as-is
  $map{$mdu} = $new;
}
#for my $id (@ARGV) {
#  $map{$id} ||= $id;
#}
msg("Loaded", scalar(keys %map), "IDs");



# Set up a folder to put stuff into
if (!$name or $name eq 'AUTO') {
  $name = md5_hex( join('', keys %map) );
}
$name = "tmp/$name";
msg("Using name:", $name);

msg( Dumper(\%map) ) if $verbose;

my $dest = "$dir/$name";
msg("Making folder: $dest");
make_path($dest); # or err("Problem making folder '$dest'");

open my $HTML, '>', "$dest/index.html";

open my $WGET, '>', "$dest/$SCRIPT";
for my $mdu (sort keys %map) {
  msg("Processing: $mdu =>",$map{$mdu});
  for my $R (1, 2) {
    my($fq) = <"$fastq/$mdu/*_R${R}*q.gz">;
    -r $fq or err("Can't read file: $fq");
    my $new = $map{$mdu}."_R$R.fq.gz";
    print $WGET "wget --continue $www/~$user/$name/$new\n";
    unlink "$dest/$new";
    if ($copy) {
      system("rsync --progress '$fq' '$dest/$new'")==0
        or err("Could not copy '$fq' => $dest/$new");;
      chmod 0644, "$dest/$new";
    }
    else {
      symlink $fq, "$dest/$new" 
        or err("Could not symlink: $mdu => $new\n$fq => $dest/$new");
    }
    print $HTML "<li><a href='$new'>$new</a>\n";
  }
}
close $WGET;
close $HTML;

msg("Done.");
msg("You can download your reads by doing this:");
msg("  curl $www/~$user/$name/$SCRIPT | bash");
msg("Or manually download from:");
msg("  $www/~$user/$name/");

#-------------------------------------------------------------------
