#!/usr/bin/env perl
use strict;

#-------------------------------------------------------------------
# libraries

use Data::Dumper;
use FindBin;
use lib "$FindBin::RealBin/../perl5";
use MDU;
use MDU::Logger qw(msg err);
#use Path::Tiny;
#use Cwd 'realpath';

#-------------------------------------------------------------------

my %f;
my %id;

my $readsdir = $MDU::MDUDIR;
msg("Scanning reads in $readsdir ...");
my $cmd = qq{find $readsdir -type f -name '*q.gz' -printf "%TY%Tm%Td\t%k\t%h\t%f\n"};
open my $READS, '-|', $cmd;
while (<$READS>) {
#  print;
  chomp;
  my($date,$size,$path,$fname) = split m/\t/;
  push @{$f{$path}}, "$path/$fname # $date $size";
  my $mduid = $path;
  $mduid =~ s{^.*/}{};
  $id{$mduid}++;
}
msg("Found", scalar(keys %f), "samples");
msg("Checking for duplicates...");
my $dupe=0;
for my $folder (keys %f) {
  my $files = $f{$folder};
  if (scalar(@$files) != 2) {
     $dupe++;
     print "#\n# [$dupe] $folder\n#\n";
     for my $fq (@$files) {
       print "# rm -fv $fq\n";
     }
     print "\n";
  }
}
msg("Found $dupe folders with duplicate read sets.");

my $qcdir = $readsdir;
$qcdir =~ s/READS/QC/;
msg("Scanning QC dir: $qcdir");
my $gone=0;
$cmd = "ls -1f $qcdir/";
open my $QC, '-|', $cmd;
while (<$QC>) {
#  print;
  chomp;
  if (not exists $id{$_} and -d "$qcdir/$_" and !m/^\./) {
    $gone++;
    print "# rm -frv $qcdir/$_\n";
  }
}
msg("Found $gone redundant QC folders");

msg("Done.");
#print Dumper(\%id);

#-------------------------------------------------------------------



