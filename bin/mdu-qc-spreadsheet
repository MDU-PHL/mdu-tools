#!/usr/bin/env perl
use strict;
use warnings;

#-------------------------------------------------------------------
# libraries

use Date::Manip;
use Data::Dumper;
use Getopt::Long;
use FindBin;
use lib "$FindBin::RealBin/../perl5";
use MDU;
use MDU::Logger qw(msg err);

#-------------------------------------------------------------------
# command line

my $verbose = 0;
my $quiet   = 0;

sub usage {
  my $EXE = $FindBin::RealScript;
  print <<"USAGE";
Synopsis:
  Generate a spreadsheet from an MDU QC folder structure
Usage: 
  $EXE [options] > Makefile
Options:
  --help	This help
  --verbose	Extra debugging output ($verbose)
  --quiet	No screen output ($quiet)
USAGE
  exit;
}

GetOptions(
  "help"      => \&usage,
  "verbose"   => \$verbose,
  "quiet"     => \$quiet,
) 
or usage();

MDU::Logger->quiet($quiet);

#-------------------------------------------------------------------

open SERO, '<', "$FindBin::RealBin/../etc/senterica.serotype.map";
my %sero_of;
while (<SERO>) {
  chomp;
  my($st,$serotype) = split m/\t/;
  $sero_of{$st} = $serotype;
}

#my $dm = Date::Manip::Date->new;

my @COLS = qw(
  ISOLATE ANALYSIS_DATE SPECIES SCHEME ST SEROTYPE MLST_ALLELES AMR_GENES READS YIELD GENOME_SIZE CONTIGS AVGQUAL MINLEN AVGLEN MODELEN MAXLEN GEECEE 
);

my $count=0;
opendir(my $dh, '.');
while ( my $dir = readdir($dh) ) {
  next unless -d $dir and $dir !~ m/^\./;
  if ($count == 0) {
    print join(",", @COLS),"\n";
  }
  $count++;
  msg(" #$count $dir");
  process_id($dir);
}
closedir($dh);

#-------------------------------------------------------------------

sub process_id {
  my($id) = @_;
  my %row;
  $row{ISOLATE} = $id;

  my($species) = qx(cat $id/species.txt);
  chomp $species;
  $row{SPECIES} = $species;

  my($ts) = qx(cat $id/timestamp.txt);
#  my $date = ParseDate($ts);
  $row{ANALYSIS_DATE} = UnixDate($ts, "%Y-%m-%d");
  
  open MLST, '<', "$id/mlst.tab";
  my @mlst = split m/\t/, scalar(<MLST>);
  chomp @mlst;
  $row{SCHEME} = $mlst[1];
  $row{ST} = $mlst[2];
  $row{MLST_ALLELES} = $row{ST} eq '-'
                     ? ''
                     : join(';', @mlst[3..$#mlst])
                     ;
  close MLST;
  
  open YIELD, '<', "$id/yield.tab";
  while (<YIELD>) {
    chomp;
    my @x = split m/\t/;
#    print STDERR "$id: @x\n";
    $row{ uc($x[0]) } = $x[1];
  }
  delete $row{FILES};
  close YIELD;
  
#  my($amr) = qx(cut -f 5 $id/abricate.tabÂ | tail -n +1 | tr "\n" ";");
  my($amr) = qx(cut -f 5 $id/abricate.tab | tr "\n" ";");
  $amr =~ s/^GENE;//;  
  $amr =~ s/;$//;
  $row{AMR_GENES} = $amr;
#  chomp @amr;
#  print STDERR "$id = @amr\n";
#  $row{AMR_GENES} = scalar(@amr) ? join(';', @amr) : '';

  $row{CONTIGS} = qx(grep -c '>' $id/contigs.fa);
  chomp $row{CONTIGS};
  $row{GENOME_SIZE} = -s "$id/contigs.fa"; # approx

  $row{SEROTYPE} = $row{SCHEME} eq 'senterica' ? $sero_of{ $row{ST} } : '';
  
  print join(",", map { $row{$_} || '' } @COLS), "\n";
}

#-------------------------------------------------------------------


