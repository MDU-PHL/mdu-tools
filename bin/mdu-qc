#!/usr/bin/env perl
use strict;
use warnings;
use Cwd qw(abs_path);

#-------------------------------------------------------------------
# libraries

use Data::Dumper;
use Getopt::Long;
use FindBin;
use lib "$FindBin::RealBin/../perl5";
use MDU;
use MDU::Logger qw(msg err);

#-------------------------------------------------------------------
# globals

#-------------------------------------------------------------------
# command line

my $verbose = 0;
my $quiet   = 0;
my $rootdir = $MDU::MDUDIR;
my $idfile  = '';
my $outdir = abs_path("$rootdir/../QC");
my $NUMCPU = num_cpus();
my $CPU = 4;
my $scan = 0;

#-------------------------------------------------------------------

sub usage {
  my $EXE = $FindBin::RealScript;
  print <<"EOUSAGE";
SYNOPSIS
  Generate a Makefile to QC all the MDU isolates
USAGE
  $EXE [options] --idfile <ids.txt>
  $EXE [options] --scan       
OPTIONS
  --help	This help
  --verbose	Extra debugging output ($verbose)
  --quiet	No screen output ($quiet)
  --rootdir D   Folder where reads are contained ($rootdir)
  --idfile  F   List of IDs to run on ($idfile)
  --scan        Scan --rootdir for the read IDs; very slow!
  --outdir  D   Output folder for Makefile ($outdir)
EOUSAGE
  exit;
}

GetOptions(
  "help"      => \&usage,
  "verbose"   => \$verbose,
  "quiet"     => \$quiet,
  "rootdir=s" => \$rootdir,
  "outdir=s" => \$outdir,
  "idfile=s"  => \$idfile,
  "scan!"     => \$scan,
) 
or usage();

MDU::Logger->quiet($quiet);

#-------------------------------------------------------------------
# main script

$MDU::MDUDIR = abs_path( $rootdir ) if $rootdir;
$idfile = abs_path($idfile) if $idfile;
$outdir = abs_path($outdir) if $outdir;

($scan xor $idfile) or err("Please choose --scan OR --idfile IDS.TXT");

msg("Detected $NUMCPU cores.");

my @ID;

if ($idfile) {
  -r $idfile or err("--idfile '$idfile' is not readable");
  msg("Reading IDS from: $idfile");
  open my $FH, '<', $idfile;
  @ID = <$FH>;
  chomp @ID;
}
else {
  msg("Scanning", MDU->dir, "- please be VERY patient...");
  @ID = MDU->all_ids();
}
msg("Read", 0+@ID, "IDs from", $ID[0], "to", $ID[-1]);

my $count=0;
my %reads;

unless ($idfile) {
  $idfile = "$outdir/isolates.txt";
  msg("Creating: $idfile");
  open my $IDFILE, '>', $idfile;
  print $IDFILE "$_\n" foreach (@ID);
  close $IDFILE;
}

msg("Creating: $outdir/Makefile");
open my $MAKEFILE, '>', "$outdir/Makefile";
select $MAKEFILE;

# makefile vars
my $jobs = int($NUMCPU / $CPU) + 1;

print "MAXCPUS := $NUMCPU\n";
print "CPUS := $CPU\n";
print "JOBS := $jobs\n";
print "IDFILE := $idfile\n";

# use embedded makefile at end of this script
print while (<DATA>);

for my $name (@ID) {
  for my $N ("R1", "R2") {
    print "$name/$N.fq.gz : \$(wildcard $rootdir/$name/*$N*q.gz)\n";
    print "\tmkdir -p \$(\@D)\n";
    print "\tln -s -f \$\< \$\@\n";
  }
  $count++;
}
select STDOUT;

msg("Now run: nice make -l $NUMCPU -j $jobs -C $outdir");

sub num_cpus {
  my($num)= qx(getconf _NPROCESSORS_ONLN); # POSIX
  chomp $num;
  return $num || 1;
}

#-------------------------------------------------------------------

__DATA__

SHELL = /bin/bash
MAKEFLAGS += --no-builtin-rules
MAKEFLAGS += --no-builtin-variables
MAKEFLAGS += --load-average=$(MAXCPUS)

KRAKEN_DB := /home/linuxbrew/db/kraken/minikraken
AMR_DB := ncbi
AMR_SEQ := /home/tseemann/git/abricate/db/$(AMR_DB)/sequences
VIR_DB := vfdb
VIR_SEQ := /home/tseemann/git/abricate/db/$(VIR_DB)/sequences
MLST_SEQ := /home/tseemann/git/mlst/db/blast/mlst.fa
SIXESS_DB := SILVA.gz
ASSEMBLER := skesa

ISOLATES := $(shell cat $(IDFILE))
COMMANDS := contigs mlst yield resistome abricate sketch kraken species prokka

.SUFFIXES:
.DELETE_ON_ERROR:
.SECONDARY:
.ONESHELL:
.DEFAULT: all
.PHONY: all info clean blastdb $(COMMANDS)

all : QC.tab prokka sketch virulome

help :
	@echo "make info          - list isolates that will be processed"
	@echo "make               - update everything"
	@echo "make <tool>        - $(COMMANDS)"
	@echo "make NAME=VALUE    - KRAKEN_DB AMR_DB SIXESS_DB CPUS"
	@echo "make ID/contigs.fa - specific isolate and analysis"

info :
	echo $(ISOLATES)  | tr " " "\n" | nl

contigs : $(addsuffix /contigs.fa,$(ISOLATES))
shovill : $(addsuffix /shovill.fa,$(ISOLATES))
skesa : $(addsuffix /skesa.fa,$(ISOLATES))
mlst : $(addsuffix /mlst.tab,$(ISOLATES))
yield : $(addsuffix /yield.tab,$(ISOLATES))
abricate : $(addsuffix /abricate.tab,$(ISOLATES))
resistome : $(addsuffix /resistome.tab,$(ISOLATES))
virulome : $(addsuffix /virulome.tab,$(ISOLATES))
sketch : $(addsuffix /sketch.msh,$(ISOLATES))
kraken : $(addsuffix /kraken.tab,$(ISOLATES))
species : $(addsuffix /species.txt,$(ISOLATES))
prokka : $(addsuffix /prokka.gff,$(ISOLATES))
qc : $(addsuffix /qc.tab,$(ISOLATES))

clean :
	find . -type f -size 0 -delete -print
	find . -type d -name assembler -exec rm -frv {} \;
	find . -type d -name '?' -exec rm -frv {} \;

FILES.tab :
	find . -type f -printf "%P\t%s\t%T+\n" > $@

QC.tab : $(addsuffix /qc.tab,$(ISOLATES))
	rm -f $(@).tmp
	while read ID ; do cat $$ID/qc.tab >> $(@).tmp ; done < $(IDFILE)
	sort -u < $(@).tmp > $@

QC.csv : QC.tab
	tsv_to_csv.pl < $< > $@

blastdb : mducontigs.nin

mducontigs.nin : $(addsuffix /contigs.fa,$(ISOLATES))
	cat $^ | makeblastdb -title mducontigs -dbtype nucl -hash_index -out mducontigs

%/qc.tab : %/contigs.fa %/resistome.tab %/virulome.tab %/mlst.tab %/species.txt %/yield.tab %/prokka.gff
	mdu-qc-isolate_summary --quiet --header $(@D) > $@

%/prokka.gff : %/contigs.fa %/species.txt
	$(eval TMP := $(shell mktemp -d))
	prokka --outdir $(TMP) --force \
	--cpus $(CPUS) --quiet --fast \
	--locustag $(@D) --prefix prokka \
	--genus $(shell cut -d ' ' -f 1 $(word 2,$^)) \
	--species $(shell cut -d ' ' -f 2 $(word 2,$^)) \
	--strain $(@D) \
	$< 
	mv -f $(TMP)/prokka.gff $@
	rm -fr $(TMP)

%/contigs.fa : %/$(ASSEMBLER).fa
	ln -v -s -f $$(basename $<) $@

%/skesa.fa : %/R1.fq.gz %/R2.fq.gz
	skesa --cores $(CPUS) --use_paired_ends \
	--gz --fastq $(word 1,$^),$(word 2,$^) 2> /dev/null \
	| seqtk rename - $(@D)_ \
	| seqtk seq -U -l 60 - \
	> $@

%/shovill.fa : %/R1.fq.gz %/R2.fq.gz
	$(eval TMP := $(shell mktemp -d))
	shovill --cpus $(CPUS) --outdir $(TMP) --force \
	--R1 $(word 1,$^) --R2 $(word 2,$^) \
	--namefmt "$(@D)_%05d" 2> /dev/null
	mv -f $(TMP)/contigs.fa $@
	mv -f $(TMP)/contigs.gfa $(basename $@).gfa
	rm -fr $(TMP)

%/abricate.tab : %/contigs.fa
	abricate --quiet --db resfinder $< > $@

%/resistome.tab : %/contigs.fa $(AMR_SEQ)
	abricate --quiet --db $(AMR_DB) $< > $@

%/virulome.tab : %/contigs.fa $(VIR_SEQ)
	abricate --quiet --db $(VIR_DB) $< > $@

%/mlst.tab : %/contigs.fa $(MLST_SEQ)
	mlst --quiet $< > $@

%/yield.tab : %/R1.fq.gz %/R2.fq.gz
	fq --quiet $^ > $@

%/sketch.msh : %/R1.fq.gz %/R2.fq.gz
	mash sketch -p $(CPUS) -o $(basename $@) -m 3 -r <(cat $^)

%/kraken.tab : %/R1.fq.gz %/R2.fq.gz
	kraken --threads $(CPUS) --db $(KRAKEN_DB) --paired $^ | kraken-report --db $(KRAKEN_DB) > $@

%/species.txt : %/kraken.tab
	grep -m 1 -w S $< | cut -f6 | sed 's/^ *//' > $@

%/sixess.txt : %/R1.fq.gz
	sixess -d $(SIXESS_DB) -q -t $(CPUS) $< > $@
