#!/usr/bin/env perl
use strict;
use Data::Dumper;
use Path::Tiny;
use IO::File;

# Globals
my $DEBUG_READS = 1_000_000;
my $REPORT_INTERVAL = 100_000;

# Cmdline args
my(@Options, $debug, $outdir, $prefix, $cpus,
             $screen, $kmer, $ref,
             $fastq, $barcodes, $transposon, $minlen);
setOptions();

# Check options
$fastq or err("Please provide --fastq");
-r $fastq or err("Can't read --fastq '$fastq'");
$outdir or err("Please provide --outdir FOLDER");
$barcodes or err("Please provide --barcodes B1,B2,B3,B4,...");
$transposon or err("Please provide a --transposon [AGTC]+");
$prefix or err("Please provide a --prefix FILENAME");
if ($prefix eq 'AUTO') {
  $prefix = path($fastq)->basename(qr/\.f(ast)?q(\.gz)?/);
  msg("Setting --prefix to '$prefix'");
}
#-r $ref or err("Reference --ref '$ref' is not readable");
#exit;

# make output folder
path($outdir)->mkpath unless -d $outdir;

# prepare phix kmers
my $dna = uc(join '', <DATA>);
$dna =~ s/[^ATGC]//gsm;
msg("Loaded phiX", length($dna), "bp");
msg("Indexing phiX with K=$kmer");
my $phix = seq_kmers($dna, $kmer);
msg("Found", scalar(keys %$phix), "kmers");

# diversity (GGAACTCCT|TAGCACATG|CCTTGAGGA|ATCGTGTAC)
# barcodes (ACTGAC|CTGACT|TGACTG|GACTGA) / ACTGAC CTGACT TGACTG GACTGA

my @bc = split /,/, uc($barcodes);
msg("Found", 0+@bc, "barcodes: @bc");
@bc > 1 or err("Only one barcode provided?");
$transposon =~ s/[^AGTC]/\./g;
$_ =~ s/[^AGTC]/\./g for (@bc);
my $template = "^(.*?)(".join('|',@bc).")(.*?)$transposon";
msg("Pattern:", $template);
my $regexp = qr"$template";

# output handles
my %out_fh;
for my $bc (@bc) {
  my $out_fn = "$outdir/$prefix.$bc.fasta";
  msg("Creating output file: $out_fn");
  $out_fh{$bc} = IO::File->new("> $out_fn");
}

# Parse FASTQ
my %stat = (PHI_X=>0);
my %barcode;
my %taglen;
my %tag;

msg("Reading: $fastq");
open my $READS, '-|', "seqtk seq -L $minlen -A -U -C '$fastq'";
my $N=0;
while (my $read = <$READS>) {
  next if $read =~ m/^>/;
  chomp $read;
  $N++;
  #msg("READ: [$read]");
  
  if ($N % $REPORT_INTERVAL == 0) {
    my $msg = join ' | ', map { "$_=".percent($stat{$_}, $N) } qw(MATCH PHI_X SHORT_TAG);
    print STDERR "\r", $msg;
  }

  $stat{CONTAIN_N}++ if $read =~ m/N/;

  if ($read =~ $regexp) {
    my($div,$bc,$seq) = ($1,$2,$3);
    $stat{MATCH}++;
    $barcode{$bc}++;
    my $L = length($seq);
    $taglen{$L}++;
    $stat{END_IN_TA}++ if $seq =~ /TA$/;
    $L >= $minlen ? (print {$out_fh{$bc}} ">$N\n$seq\n") : $stat{SHORT_TAG}++;
  }
  elsif ($screen and phix_score($read, $kmer) > 0.5 ) {
    $stat{PHI_X}++;
  }
  else {
    $stat{NO_MATCH}++;
  }
  last if $debug and $N >= $DEBUG_READS;
}
print STDERR "\nFinished processing $N reads.\n";
$stat{TOTAL} = $N;

# stats
msg( "Matched:", percent($stat{MATCH},$N) );
for my $b (@bc) {
  msg("Barcode $b", percent($barcode{$b},$stat{MATCH}),"|", percent($barcode{$b},$N) );
}

# save output
path("$outdir/$prefix.txt")->spew(Dumper(\%stat, \%barcode, \%taglen));

# Finish up
msg("Results in: $outdir");
msg("File: $_") for (sort glob("$outdir/$prefix*"));
msg("Done.");
exit(0);

#----------------------------------------------------------------------
sub phix_score {
  my($read) = @_;
  my $matches = 0;
  my $P=0;
  my $step = $kmer-int($kmer/3);
  while ($read =~ m/(.{$kmer})/g) {
    next if $1 =~ /N/;
    $P++;
    $matches++ if $phix->{$1};
    pos($read) -= $step;
#    msg("  PHI_X: $read | $1 |",pos($read),"| $matches/$P");
  }
  return $matches / $P;
}

#----------------------------------------------------------------------
sub seq_kmers {
  my($dna, $K, $step) = @_;
  $K ||= $kmer;
  $step ||= 1;
  my $L = length($dna);
  my $hash;
  for my $i (0 .. $L-$K-1) {
    $hash->{ substr($dna, $i, $K) }++;
  }
  return $hash;
}

#----------------------------------------------------------------------
sub percent {
  my($x,$y) = @_;
  my $pc = sprintf "%.1f", $x*100.0/$y;
  return $pc <= 100 ? "$x/$y ($pc%)" : "-";
}

#----------------------------------------------------------------------

sub run_cmd {
  my($cmd, $quiet) = @_;
  msg("Running: $cmd") unless $quiet;
  system($cmd)==0 or err("Error $? running command");
}

#----------------------------------------------------------------------
sub msg {
  print STDERR "@_\n";
}
      
#----------------------------------------------------------------------
sub err {
  msg("ERROR:", @_);
  exit(1);
}

#----------------------------------------------------------------------
sub num_cpus {
  my($num)= qx(getconf _NPROCESSORS_ONLN); # POSIX
  chomp $num;
  return $num || 1;
}
   
#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    {OPT=>"help",    VAR=>\&usage,             DESC=>"This help"},
    {OPT=>"debug!",  VAR=>\$debug, DEFAULT=>0, DESC=>"Debug info"},
    {OPT=>"fastq=s",  VAR=>\$fastq, DEFAULT=>'', DESC=>"Read sequences"},
    {OPT=>"outdir=s",  VAR=>\$outdir, DEFAULT=>'.', DESC=>"Output folder"},
    {OPT=>"prefix=s",  VAR=>\$prefix, DEFAULT=>'AUTO', DESC=>"Output file prefix"},
    {OPT=>"cpus=i",  VAR=>\$cpus, DEFAULT=>1, DESC=>"Number of CPUs to use"},
    {OPT=>"barcodes=s",  VAR=>\$barcodes, DEFAULT=>'ACTGAC,CTGACT,TGACTG,GACTGA', DESC=>"Comma separated"},    
    {OPT=>"transposon=s",  VAR=>\$transposon, DEFAULT=>'ACAGGTTGGATGATAA', DESC=>"Transposon sequence head"},    
    {OPT=>"minlen=i",  VAR=>\$minlen, DEFAULT=>15, DESC=>"Minimum length of tag to keep"},
    {OPT=>"screen!",  VAR=>\$screen, DEFAULT=>0, DESC=>"Screen against PhiX-174"},
    {OPT=>"kmer=i",  VAR=>\$kmer, DEFAULT=>12, DESC=>"K-mer size for --screen"},
#    {OPT=>"ref=s",  VAR=>\$ref, DEFAULT=>'', DESC=>"Reference genome"},
  );

  (!@ARGV) && (usage());

  &GetOptions(map {$_->{OPT}, $_->{VAR}} @Options) || usage();

  # Now setup default values.
  foreach (@Options) {
    if (defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

sub usage {
  my $EXE = path($0)->basename;
  print "USAGE\n  $EXE [options] --outdir OUTDIR --fastq READS\n";
  print "MODEL\n  5' [diversity] [barcode] [tag] [transposon] 3'\n";
  print "OPTIONS\n";
  foreach (@Options) {
    printf "  --%-14s %s%s.\n",$_->{OPT},$_->{DESC},
           defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
  }
  exit(0);
}
 
#----------------------------------------------------------------------
# phix genome

__DATA__
GAGTTTTATCGCTTCCATGACGCAGAAGTTAACACTTTCGGATATTTCTGATGAGTCGAAAAATTATCTT
GATAAAGCAGGAATTACTACTGCTTGTTTACGAATTAAATCGAAGTGGACTGCTGGCGGAAAATGAGAAA
ATTCGACCTATCCTTGCGCAGCTCGAGAAGCTCTTACTTTGCGACCTTTCGCCATCAACTAACGATTCTG
TCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCTTGGCACGTTCGTCAAGGACTGGTTTA
GATATGAGTCACATTTTGTTCATGGTAGAGATTCTCTTGTTGACATTTTAAAAGAGCGTGGATTACTATC
TGAGTCCGATGCTGTTCAACCACTAATAGGTAAGAAATCATGAGTCAAGTTACTGAACAATCCGTACGTT
TCCAGACCGCTTTGGCCTCTATTAAGCTCATTCAGGCTTCTGCCGTTTTGGATTTAACCGAAGATGATTT
CGATTTTCTGACGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCT
TGCGTTTATGGTACGCTGGACTTTGTGGGATACCCTCGCTTTCCTGCTCCTGTTGAGTTTATTGCTGCCG
TCATTGCTTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCTCATCATGGAAGGCGCTGAATTTAC
GGAAAACATTATTAATGGCGTCGAGCGTCCGGTTAAAGCCGCTGAATTGTTCGCGTTTACCTTGCGTGTA
CGCGCAGGAAACACTGACGTTCTTACTGACGCAGAAGAAAACGTGCGTCAAAAATTACGTGCGGAAGGAG
TGATGTAATGTCTAAAGGTAAAAAACGTTCTGGCGCTCGCCCTGGTCGTCCGCAGCCGTTGCGAGGTACT
AAAGGCAAGCGTAAAGGCGCTCGTCTTTGGTATGTAGGTGGTCAACAATTTTAATTGCAGGGGCTTCGGC
CCCTTACTTGAGGATAAATTATGTCTAATATTCAAACTGGCGCCGAGCGTATGCCGCATGACCTTTCCCA
TCTTGGCTTCCTTGCTGGTCAGATTGGTCGTCTTATTACCATTTCAACTACTCCGGTTATCGCTGGCGAC
TCCTTCGAGATGGACGCCGTTGGCGCTCTCCGTCTTTCTCCATTGCGTCGTGGCCTTGCTATTGACTCTA
CTGTAGACATTTTTACTTTTTATGTCCCTCATCGTCACGTTTATGGTGAACAGTGGATTAAGTTCATGAA
GGATGGTGTTAATGCCACTCCTCTCCCGACTGTTAACACTACTGGTTATATTGACCATGCCGCTTTTCTT
GGCACGATTAACCCTGATACCAATAAAATCCCTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACA
ACTATTTTAAAGCGCCGTGGATGCCTGACCGTACCGAGGCTAACCCTAATGAGCTTAATCAAGATGATGC
TCGTTATGGTTTCCGTTGCTGCCATCTCAAAAACATTTGGACTGCTCCGCTTCCTCCTGAGACTGAGCTT
TCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGC
ATACTGACCAAGAACGTGATTACTTCATGCAGCGTTACCATGATGTTATTTCTTCATTTGGAGGTAAAAC
CTCTTATGACGCTGACAACCGTCCTTTACTTGTCATGCGCTCTAATCTCTGGGCATCTGGCTATGATGTT
GATGGAACTGACCAAACGTCGTTAGGCCAGTTTTCTGGTCGTGTTCAACAGACCTATAAACATTCTGTGC
CGCGTTTCTTTGTTCCTGAGCATGGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGAC
TAAAGAGATTCAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTG
TATGGCAACTTGCCGCCGCGTGAAATTTCTATGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGT
TTAAGATTGCTGAGGGTCAGTGGTATCGTTATGCGCCTTCGTATGTTTCTCCTGCTTATCACCTTCTTGA
AGGCTTCCCATTCATTCAGGAACCGCCTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGAT
TATGACCAGTGTTTCCAGTCCGTTCAGTTGTTGCAGTGGAATAGTCAGGTTAAATTTAATGTGACCGTTT
ATCGCAATCTGCCGACCACTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAAC
GCCGAAGCGGTAAAAATTTTAATTTTTGCCGCTGAGGGGTTGACCAAGCGAAGCGCGGTAGGTTTTCTGC
TTAGGAGTTTAATCATGTTTCAGACTTTTATTTCTCGCCATAATTCAAACTTTTTTTCTGATAAGCTGGT
TCTCACTTCTGTTACTCCAGCTTCTTCGGCACCTGTTTTACAGACACCTAAAGCTACATCGTCAACGTTA
TATTTTGATAGTTTGACGGTTAATGCTGGTAATGGTGGTTTTCTTCATTGCATTCAGATGGATACATCTG
TCAACGCCGCTAATCAGGTTGTTTCTGTTGGTGCTGATATTGCTTTTGATGCCGACCCTAAATTTTTTGC
CTGTTTGGTTCGCTTTGAGTCTTCTTCGGTTCCGACTACCCTCCCGACTGCCTATGATGTTTATCCTTTG
AATGGTCGCCATGATGGTGGTTATTATACCGTCAAGGACTGTGTGACTATTGACGTCCTTCCCCGTACGC
CGGGCAATAACGTTTATGTTGGTTTCATGGTTTGGTCTAACTTTACCGCTACTAAATGCCGCGGATTGGT
TTCGCTGAATCAGGTTATTAAAGAGATTATTTGTCTCCAGCCACTTAAGTGAGGTGATTTATGTTTGGTG
CTATTGCTGGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAA
AGCCGCCTCCGGTGGCATTCAAGGTGATGTGCTTGCTACCGATAACAATACTGTAGGCATGGGTGATGCT
GGTATTAAATCTGCCATTCAAGGCTCTAATGTTCCTAACCCTGATGAGGCCGCCCCTAGTTTTGTTTCTG
GTGCTATGGCTAAAGCTGGTAAAGGACTTCTTGAAGGTACGTTGCAGGCTGGCACTTCTGCCGTTTCTGA
TAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAAAGGAAAGGATACTCGTGATTAT
CTTGCTGCTGCATTTCCTGAGCTTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTCTGCTGGTATGG
TTGACGCCGGATTTGAGAATCAAAAAGAGCTTACTAAAATGCAACTGGACAATCAGAAAGAGATTGCCGA
GATGCAAAATGAGACTCAAAAAGAGATTGCTGGCATTCAGTCGGCGACTTCACGCCAGAATACGAAAGAC
CAGGTATATGCACAAAATGAGATGCTTGCTTATCAACAGAAGGAGTCTACTGCTCGCGTTGCGTCTATTA
TGGAAAACACCAATCTTTCCAAGCAACAGCAGGTTTCCGAGATTATGCGCCAAATGCTTACTCAAGCTCA
AACGGCTGGTCAGTATTTTACCAATGACCAAATCAAAGAAATGACTCGCAAGGTTAGTGCTGAGGTTGAC
TTAGTTCATCAGCAAACGCAGAATCAGCGGTATGGCTCTTCTCATATTGGCGCTACTGCAAAGGATATTT
CTAATGTCGTCACTGATGCTGCTTCTGGTGTGGTTGATATTTTTCATGGTATTGATAAAGCTGTTGCCGA
TACTTGGAACAATTTCTGGAAAGACGGTAAAGCTGATGGTATTGGCTCTAATTTGTCTAGGAAATAACCG
TCAGGATTGACACCCTCCCAATTGTATGTTTTCATGCCTCCAAATCTTGGAGGCTTTTTTATGGTTCGTT
CTTATTACCCTTCTGAATGTCACGCTGATTATTTTGACTTTGAGCGTATCGAGGCTCTTAAACCTGCTAT
TGAGGCTTGTGGCATTTCTACTCTTTCTCAATCCCCAATGCTTGGCTTCCATAAGCAGATGGATAACCGC
ATCAAGCTCTTGGAAGAGATTCTGTCTTTTCGTATGCAGGGCGTTGAGTTCGATAATGGTGATATGTATG
TTGACGGCCATAAGGCTGCTTCTGACGTTCGTGATGAGTTTGTATCTGTTACTGAGAAGTTAATGGATGA
ATTGGCACAATGCTACAATGTGCTCCCCCAACTTGATATTAATAACACTATAGACCACCGCCCCGAAGGG
GACGAAAAATGGTTTTTAGAGAACGAGAAGACGGTTACGCAGTTTTGCCGCAAGCTGGCTGCTGAACGCC
CTCTTAAGGATATTCGCGATGAGTATAATTACCCCAAAAAGAAAGGTATTAAGGATGAGTGTTCAAGATT
GCTGGAGGCCTCCACTATGAAATCGCGTAGAGGCTTTGCTATTCAGCGTTTGATGAATGCAATGCGACAG
GCTCATGCTGATGGTTGGTTTATCGTTTTTGACACTCTCACGTTGGCTGACGACCGATTAGAGGCGTTTT
ATGATAATCCCAATGCTTTGCGTGACTATTTTCGTGATATTGGTCGTATGGTTCTTGCTGCCGAGGGTCG
CAAGGCTAATGATTCACACGCCGACTGCTATCAGTATTTTTGTGTGCCTGAGTATGGTACAGCTAATGGC
CGTCTTCATTTCCATGCGGTGCACTTTATGCGGACACTTCCTACAGGTAGCGTTGACCCTAATTTTGGTC
GTCGGGTACGCAATCGCCGCCAGTTAAATAGCTTGCAAAATACGTGGCCTTATGGTTACAGTATGCCCAT
CGCAGTTCGCTACACGCAGGACGCTTTTTCACGTTCTGGTTGGTTGTGGCCTGTTGATGCTAAAGGTGAG
CCGCTTAAAGCTACCAGTTATATGGCTGTTGGTTTCTATGTGGCTAAATACGTTAACAAAAAGTCAGATA
TGGACCTTGCTGCTAAAGGTCTAGGAGCTAAAGAATGGAACAACTCACTAAAAACCAAGCTGTCGCTACT
TCCCAAGAAGCTGTTCAGAATCAGAATGAGCCGCAACTTCGGGATGAAAATGCTCACAATGACAAATCTG
TCCACGGAGTGCTTAATCCAACTTACCAAGCTGGGTTACGACGCGACGCCGTTCAACCAGATATTGAAGC
AGAACGCAAAAAGAGAGATGAGATTGAGGCTGGGAAAAGTTACTGTAGCCGACGTTTTGGCGGCGCAACC
TGTGACGACAAATCTGCTCAAATTTATGCGCGCTTCGATAAAAATGATTGGCGTATCCAACCTGCA
