#!/usr/bin/env perl
use strict;
use warnings;

#-------------------------------------------------------------------
# libraries

use Data::Dumper;
use Getopt::Long;
use Cwd 'abs_path';
use FindBin;
use lib "$FindBin::RealBin/../perl5";
use MDU;
use MDU::Logger qw(msg err);
use List::Util qw(sum max);

#-------------------------------------------------------------------
# command line

my $verbose = 0;
my $db_file = abs_path( $MDU::MDUDIR."/../QC/QC.tab" );
my $logical_or = 0;
my $csv = 0;
my $count = 0;
my $columns = 0;
my($species, $scheme, $seqtype, $isolate, $date, 
   $amr, $abx, $sero, $allele, $depth, $year);

# special case if no arguments, dump whole DB
if (@ARGV == 0) {
  exit( ! system("cat \Q$db_file\E") );
}

sub usage {
  my $EXE = $FindBin::RealScript;
  print <<"USAGE";
Synopsis:
  Query the MDU WGS database
Usage: 
  $EXE [options] 
Options:
  --help	This help
  --verbose	Extra debugging output ($verbose)
  --count       Just print count of matching isolates
  --columns     Show the available columns
  --csv	        Write CSV instead of TSV/TAB
  --db FILE     CSV of isolate data ($db_file)
  --or          Do logical OR instead of AND
  --species P   Match SPECIES 
  --st      X   Match ST exactly
  --allele  G   Match ST Alleles
  --scheme  P   Match SCHEME
  --id      P   Match ISOLATE
  --amr     G   Match AMR_GENES
  --abx     G   Match AMR_RESISTANCE (antiobiotics)
  --sero    G   Match SEROTYPE
  --depth   D   Has DEPTH less than D
  --year    Y   ISOLATE name starts with Y
USAGE
  exit;
}

GetOptions(
  "help"      => \&usage,
  "verbose"   => \$verbose,
  "db=s"      => \$db_file,
  "csv"       => \$csv,
  "or"        => \$logical_or,
  "species=s" => \$species,
  "st=s"      => \$seqtype,
  "scheme=s"  => \$scheme,
  "id=s"      => \$isolate,
  "year=i"    => \$year,
  "amr=s"     => \$amr,
  "abx=s"     => \$abx,
  "sero=s"    => \$sero,
  "allele=s"  => \$allele,
  "depth=i"    => \$depth,
  "count!"    => \$count,
  "columns!"  => \$columns,
) 
or usage();

#-------------------------------------------------------------------
# main script

my %db;
msg("Opening database: $db_file");
$db_file or err("Database file not present: $db_file");
open TSV, '<', $db_file;
my $header = <TSV>;
my(@hdr) = split m/\t/, $header;
chomp @hdr;
while (my $line = <TSV>) {
  chomp $line;
  my @x = split m/\t/, $line;
  for my $i (0 .. $#x) {
    $db { $x[0] } { $hdr[$i] } = $x[$i];
  }
  $line = tab_to_csv($line) if $csv;
  $db{$x[0]}{LINE} = $line;

  # calculated fields
  my $rec = $db{ $x[0] };
  push @hdr, 'DEPTH';
  $rec->{DEPTH} = int( $rec->{YIELD} / $rec->{GENOME_SIZE} );

  if ($columns) {
    my $c = 1;
    my $L = max( map { length } @hdr );
    for my $col (@hdr) {
      printf "%2d  %-*s  %s\n", $c++, $L, $col, $db{$x[0]}{$col};
    }
    exit(0);
  }
}
close TSV;
msg("Read", scalar(keys %db), "isolates.");

my $pass = sum( 
  map { $_ ? 1 : 0 } 
    ($species, $seqtype, $sero, $scheme, $isolate, 
     $amr, $abx, $allele, $depth, $year)
);
$pass = 1 if $logical_or and $pass >= 1;
$pass ||= 1E9;
my @match;
for my $id (keys %db) {
  my $score=0;
  $score++ if $species and $db{$id}{SPECIES}       =~ m/$species/i;
  $score++ if $scheme  and $db{$id}{SCHEME}        =~ m/$scheme/i;
  $score++ if $seqtype and $db{$id}{ST}            eq $seqtype;
  $score++ if $allele  and $db{$id}{MLST_ALLELES}  =~ m/$allele/i;
  $score++ if $isolate and $db{$id}{ISOLATE}       =~ m/$isolate/i;
  $score++ if $date    and $db{$id}{ANALYSIS_DATE} =~ m/$date/;
  $score++ if $amr     and $db{$id}{AMR_GENES}     =~ m/$amr/i;
  $score++ if $abx     and $db{$id}{AMR_RESISTANCE} =~ m/$abx/i;
  $score++ if $sero    and $db{$id}{SEROTYPE}      =~ m/$sero/i;
  $score++ if $depth   and $db{$id}{DEPTH} < $depth;
  $score++ if $year    and $db{$id}{ISOLATE} =~ m/^$year/;
  push @match, $db{$id}{LINE} if $score >= $pass;
}
msg("Found", 0+@match, "matches");
$header = tab_to_csv($header) if $csv;
print $header, map { "$_\n" } @match if @match > 0 and !$count
;

#-------------------------------------------------------------------

sub tab_to_csv {
  my($line) = @_;
  $line =~ s/,/~/g;
  $line =~ s/\t/,/g;
  return $line;
}

